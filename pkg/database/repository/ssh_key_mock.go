// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/database/repository/ssh_key.go

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pgx "github.com/jackc/pgx/v5"
	models "github.com/therealpaulgg/ssh-sync-server/pkg/database/models"
)

// MockSshKeyRepository is a mock of SshKeyRepository interface.
type MockSshKeyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSshKeyRepositoryMockRecorder
}

// MockSshKeyRepositoryMockRecorder is the mock recorder for MockSshKeyRepository.
type MockSshKeyRepositoryMockRecorder struct {
	mock *MockSshKeyRepository
}

// NewMockSshKeyRepository creates a new mock instance.
func NewMockSshKeyRepository(ctrl *gomock.Controller) *MockSshKeyRepository {
	mock := &MockSshKeyRepository{ctrl: ctrl}
	mock.recorder = &MockSshKeyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSshKeyRepository) EXPECT() *MockSshKeyRepositoryMockRecorder {
	return m.recorder
}

// CreateSshKey mocks base method.
func (m *MockSshKeyRepository) CreateSshKey(sshKey *models.SshKey) (*models.SshKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSshKey", sshKey)
	ret0, _ := ret[0].(*models.SshKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSshKey indicates an expected call of CreateSshKey.
func (mr *MockSshKeyRepositoryMockRecorder) CreateSshKey(sshKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSshKey", reflect.TypeOf((*MockSshKeyRepository)(nil).CreateSshKey), sshKey)
}

// UpsertSshKey mocks base method.
func (m *MockSshKeyRepository) UpsertSshKey(sshKey *models.SshKey) (*models.SshKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertSshKey", sshKey)
	ret0, _ := ret[0].(*models.SshKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertSshKey indicates an expected call of UpsertSshKey.
func (mr *MockSshKeyRepositoryMockRecorder) UpsertSshKey(sshKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertSshKey", reflect.TypeOf((*MockSshKeyRepository)(nil).UpsertSshKey), sshKey)
}

// UpsertSshKeyTx mocks base method.
func (m *MockSshKeyRepository) UpsertSshKeyTx(sshKey *models.SshKey, tx pgx.Tx) (*models.SshKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertSshKeyTx", sshKey, tx)
	ret0, _ := ret[0].(*models.SshKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertSshKeyTx indicates an expected call of UpsertSshKeyTx.
func (mr *MockSshKeyRepositoryMockRecorder) UpsertSshKeyTx(sshKey, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertSshKeyTx", reflect.TypeOf((*MockSshKeyRepository)(nil).UpsertSshKeyTx), sshKey, tx)
}
