// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/database/repository/ssh_config.go

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	pgx "github.com/jackc/pgx/v5"
	models "github.com/therealpaulgg/ssh-sync-server/pkg/database/models"
)

// MockSshConfigRepository is a mock of SshConfigRepository interface.
type MockSshConfigRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSshConfigRepositoryMockRecorder
}

// MockSshConfigRepositoryMockRecorder is the mock recorder for MockSshConfigRepository.
type MockSshConfigRepositoryMockRecorder struct {
	mock *MockSshConfigRepository
}

// NewMockSshConfigRepository creates a new mock instance.
func NewMockSshConfigRepository(ctrl *gomock.Controller) *MockSshConfigRepository {
	mock := &MockSshConfigRepository{ctrl: ctrl}
	mock.recorder = &MockSshConfigRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSshConfigRepository) EXPECT() *MockSshConfigRepositoryMockRecorder {
	return m.recorder
}

// GetSshConfig mocks base method.
func (m *MockSshConfigRepository) GetSshConfig(machineID, userID uuid.UUID) (*models.SshConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSshConfig", machineID, userID)
	ret0, _ := ret[0].(*models.SshConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSshConfig indicates an expected call of GetSshConfig.
func (mr *MockSshConfigRepositoryMockRecorder) GetSshConfig(machineID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSshConfig", reflect.TypeOf((*MockSshConfigRepository)(nil).GetSshConfig), machineID, userID)
}

// UpsertSshConfig mocks base method.
func (m *MockSshConfigRepository) UpsertSshConfig(config *models.SshConfig) (*models.SshConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertSshConfig", config)
	ret0, _ := ret[0].(*models.SshConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertSshConfig indicates an expected call of UpsertSshConfig.
func (mr *MockSshConfigRepositoryMockRecorder) UpsertSshConfig(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertSshConfig", reflect.TypeOf((*MockSshConfigRepository)(nil).UpsertSshConfig), config)
}

// UpsertSshConfigTx mocks base method.
func (m *MockSshConfigRepository) UpsertSshConfigTx(config *models.SshConfig, tx pgx.Tx) (*models.SshConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertSshConfigTx", config, tx)
	ret0, _ := ret[0].(*models.SshConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertSshConfigTx indicates an expected call of UpsertSshConfigTx.
func (mr *MockSshConfigRepositoryMockRecorder) UpsertSshConfigTx(config, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertSshConfigTx", reflect.TypeOf((*MockSshConfigRepository)(nil).UpsertSshConfigTx), config, tx)
}
