// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/therealpaulgg/ssh-sync-server/pkg/database (interfaces: DataAccessor)

// Package database is a generated GoMock package.
package database

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pgx "github.com/jackc/pgx/v5"
)

// MockDataAccessor is a mock of DataAccessor interface.
type MockDataAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockDataAccessorMockRecorder
}

// MockDataAccessorMockRecorder is the mock recorder for MockDataAccessor.
type MockDataAccessorMockRecorder struct {
	mock *MockDataAccessor
}

// NewMockDataAccessor creates a new mock instance.
func NewMockDataAccessor(ctrl *gomock.Controller) *MockDataAccessor {
	mock := &MockDataAccessor{ctrl: ctrl}
	mock.recorder = &MockDataAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataAccessor) EXPECT() *MockDataAccessorMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockDataAccessor) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockDataAccessorMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockDataAccessor)(nil).Connect))
}

// GetConnection mocks base method.
func (m *MockDataAccessor) GetConnection() *pgx.Conn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnection")
	ret0, _ := ret[0].(*pgx.Conn)
	return ret0
}

// GetConnection indicates an expected call of GetConnection.
func (mr *MockDataAccessorMockRecorder) GetConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnection", reflect.TypeOf((*MockDataAccessor)(nil).GetConnection))
}
